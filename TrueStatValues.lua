local name, addon = ...;


--[[----------------------------------------------------------------------------
	Stat conversion factors (data taken from simc)
	https://github.com/simulationcraft/simc/blob/midnight/engine/dbc/generated/sc_scale_data.inc
------------------------------------------------------------------------------]]
local hst_cnv = {
    2.923638162,	2.923638162,	2.923638162,	2.923638162,	2.923638162,	-- 5
    2.923638162,	2.923638162,	2.923638162,	2.923638162,	2.923638162,	-- 10
    2.923638162,	3.06982007,	3.216001978,	3.362183886,	3.508365794,	-- 15
    3.654547702,	3.80072961,	3.946911518,	4.093093426,	4.239275334,	-- 20
    4.283081179,	4.328767379,	4.37638382,	4.425982836,	4.477619303,	-- 25
    4.531350734,	4.587237394,	4.6453424,	4.705731852,	4.768474943,	-- 30
    4.833644101,	4.901315118,	4.971567301,	5.044483622,	5.120150876,	-- 35
    5.198659856,	5.280105527,	5.364587216,	5.452208807,	5.543078954,	-- 40
    5.637311296,	5.735024692,	5.836343461,	5.941397644,	6.050323267,	-- 45
    6.163262635,	6.280364625,	6.401785008,	6.527686779,	6.658240515,	-- 50
    6.793624739,	6.934026317,	7.079640869,	7.230673208,	7.387337794,	-- 55
    7.549859225,	7.718472748,	7.893424797,	8.074973567,	8.263389617,	-- 60
    8.458956505,	8.661971461,	8.8727461,	9.09160717,	9.31889735,	-- 65
    9.554976083,	9.800220469,	10.0550262,	10.31980856,	10.59500345,	-- 70
    10.69418334,	10.79429165,	10.89533707,	10.99732838,	11.10027443,	-- 75
    11.20418416,	11.30906659,	11.41493083,	11.52178606,	11.62964156,	-- 80
    12.99342144,	14.51712849,	16.21951696,	18.12154041,	20.24660954,	-- 85
    22.62088037,	25.27357619,	28.23734722,	31.5486725,	44,	-- 90
  };
	
local crt_cnv = {
    3.056530805,	3.056530805,	3.056530805,	3.056530805,	3.056530805,	-- 5
    3.056530805,	3.056530805,	3.056530805,	3.056530805,	3.056530805,	-- 10
    3.056530805,	3.209357346,	3.362183886,	3.515010426,	3.667836966,	-- 15
    3.820663507,	3.973490047,	4.126316587,	4.279143127,	4.431969668,	-- 20
    4.477766688,	4.525529532,	4.575310357,	4.627163874,	4.681147453,	-- 25
    4.737321222,	4.795748184,	4.856494328,	4.919628754,	4.985223804,	-- 30
    5.053355196,	5.124102169,	5.197547633,	5.273778332,	5.352885007,	-- 35
    5.434962577,	5.520110324,	5.608432089,	5.70003648,	5.795037088,	-- 40
    5.893552718,	5.995707632,	6.1016318,	6.211461173,	6.325337961,	-- 45
    6.443410936,	6.565835744,	6.692775235,	6.824399815,	6.960887811,	-- 50
    7.102425863,	7.249209331,	7.401442727,	7.559340172,	7.723125876,	-- 55
    7.893034645,	8.069312419,	8.252216833,	8.442017821,	8.638998236,	-- 60
    8.843454528,	9.055697437,	9.276052741,	9.504862042,	9.742483593,	-- 65
    9.989293177,	10.24568504,	10.51207285,	10.78889076,	11.07659452,	-- 70
    11.18028258,	11.28494127,	11.39057967,	11.49720694,	11.60483236,	-- 75
    11.71346526,	11.82311507,	11.93379132,	12.04550361,	12.15826163,	-- 80
    13.58403151,	15.17699796,	16.95676773,	18.94524679,	21.16690997,	-- 85
    23.6491022,	26.42237511,	29.520863,	32.98270306,	46,	-- 90
  };

local mst_cnv = {
    3.056530805,	3.056530805,	3.056530805,	3.056530805,	3.056530805,	-- 5
    3.056530805,	3.056530805,	3.056530805,	3.056530805,	3.056530805,	-- 10
    3.056530805,	3.209357346,	3.362183886,	3.515010426,	3.667836966,	-- 15
    3.820663507,	3.973490047,	4.126316587,	4.279143127,	4.431969668,	-- 20
    4.477766688,	4.525529532,	4.575310357,	4.627163874,	4.681147453,	-- 25
    4.737321222,	4.795748184,	4.856494328,	4.919628754,	4.985223804,	-- 30
    5.053355196,	5.124102169,	5.197547633,	5.273778332,	5.352885007,	-- 35
    5.434962577,	5.520110324,	5.608432089,	5.70003648,	5.795037088,	-- 40
    5.893552718,	5.995707632,	6.1016318,	6.211461173,	6.325337961,	-- 45
    6.443410936,	6.565835744,	6.692775235,	6.824399815,	6.960887811,	-- 50
    7.102425863,	7.249209331,	7.401442727,	7.559340172,	7.723125876,	-- 55
    7.893034645,	8.069312419,	8.252216833,	8.442017821,	8.638998236,	-- 60
    8.843454528,	9.055697437,	9.276052741,	9.504862042,	9.742483593,	-- 65
    9.989293177,	10.24568504,	10.51207285,	10.78889076,	11.07659452,	-- 70
    11.18028258,	11.28494127,	11.39057967,	11.49720694,	11.60483236,	-- 75
    11.71346526,	11.82311507,	11.93379132,	12.04550361,	12.15826163,	-- 80
    13.58403151,	15.17699796,	16.95676773,	18.94524679,	21.16690997,	-- 85
    23.6491022,	26.42237511,	29.520863,	32.98270306,	46,	-- 90
  };

local vrs_cnv = {
    3.58810138,	3.58810138,	3.58810138,	3.58810138,	3.58810138,	-- 5
    3.58810138,	3.58810138,	3.58810138,	3.58810138,	3.58810138,	-- 10
    3.58810138,	3.767506449,	3.946911518,	4.126316587,	4.305721656,	-- 15
    4.485126725,	4.664531794,	4.843936863,	5.023341932,	5.202747001,	-- 20
    5.25650872,	5.312578146,	5.371016506,	5.431888026,	5.495260053,	-- 25
    5.561203174,	5.629791347,	5.701102037,	5.775216363,	5.852219248,	-- 30
    5.932199578,	6.015250372,	6.101468961,	6.190957172,	6.28382153,	-- 35
    6.38017346,	6.480129511,	6.583811583,	6.691347172,	6.802869625,	-- 40
    6.918518409,	7.038439394,	7.162785157,	7.29171529,	7.425396737,	-- 45
    7.564004143,	7.707720221,	7.856736146,	8.011251956,	8.171476996,	-- 50
    8.337630361,	8.509941389,	8.688650158,	8.874008028,	9.066278202,	-- 55
    9.265736322,	9.4726711,	9.687384978,	9.910194833,	10.14143271,	-- 60
    10.38144662,	10.63060134,	10.8892793,	11.15788153,	11.43682857,	-- 65
    11.72656156,	12.0275433,	12.34025943,	12.66521959,	13.00295878,	-- 70
    13.12467955,	13.24753975,	13.37155004,	13.4967212,	13.62306408,	-- 75
    13.75058965,	13.879309,	14.00923329,	14.1403738,	14.27274192,	-- 80
    15.94647177,	17.81647587,	19.90577082,	22.24007232,	24.8481117,	-- 85
    27.76198954,	31.01757078,	34.65492613,	38.71882534,	54,	-- 90
  };

  local lee_cnv = {
    4.584861654,	4.584861654,	4.584861654,	4.584861654,	4.584861654,	-- 5
    4.584861654,	4.584861654,	4.584861654,	4.584861654,	4.584861654,	-- 10
    4.584861654,	4.814104737,	5.04334782,	5.272590902,	5.501833985,	-- 15
    5.731077068,	5.96032015,	6.189563233,	6.418806316,	6.648049399,	-- 20
    6.716745909,	6.788391199,	6.863063502,	6.940844888,	7.021821412,	-- 25
    7.106083269,	7.193724963,	7.284845479,	7.37954847,	7.47794245,	-- 30
    7.580140996,	7.68626297,	7.79643274,	7.91078042,	8.029442126,	-- 35
    8.152560239,	8.280283682,	8.412768221,	8.550176769,	8.692679715,	-- 40
    8.84045527,	8.993689828,	9.152578349,	9.317324759,	9.488142379,	-- 45
    9.665254371,	9.848894204,	10.03930616,	10.23674585,	10.44148076,	-- 50
    10.65379087,	10.87396922,	11.10232257,	11.33917212,	11.58485418,	-- 55
    11.83972097,	12.10414141,	12.37850195,	12.66320749,	12.95868233,	-- 60
    13.26537115,	13.58374006,	13.91427773,	14.25749658,	14.613934,	-- 65
    14.98415366,	15.36874693,	15.76833435,	16.18356716,	16.61512895,	-- 70
    16.77066326,	16.92765353,	17.08611339,	17.24605659,	17.40749702,	-- 75
    17.5704487,	17.73492577,	17.90094251,	18.06851333,	18.23765278,	-- 80
    20.37633812,	22.76582191,	25.43551468,	28.41827584,	31.75081818,	-- 85
    35.47415968,	39.63412842,	44.2819266,	49.47476082,	69.00098495,	-- 90
  };
  
local avd_cnv = {
    2.445259549,	2.445259549,	2.445259549,	2.445259549,	2.445259549,	-- 5
    2.445259549,	2.445259549,	2.445259549,	2.445259549,	2.445259549,	-- 10
    2.445259549,	2.567522526,	2.689785504,	2.812048481,	2.934311459,	-- 15
    3.056574436,	3.178837414,	3.301100391,	3.423363368,	3.545626346,	-- 20
    3.582264485,	3.620475306,	3.660300534,	3.70178394,	3.74497142,	-- 25
    3.789911077,	3.836653313,	3.885250922,	3.935759184,	3.988235973,	-- 30
    4.042741865,	4.099340251,	4.158097461,	4.219082891,	4.282369134,	-- 35
    4.348032127,	4.416151297,	4.486809718,	4.560094277,	4.636095848,	-- 40
    4.714909477,	4.796634575,	4.881375119,	4.969239871,	5.060342602,	-- 45
    5.154802331,	5.252743575,	5.354296618,	5.459597785,	5.56878974,	-- 50
    5.682021798,	5.799450249,	5.921238704,	6.047558463,	6.178588896,	-- 55
    6.314517852,	6.455542084,	6.601867705,	6.753710662,	6.911297244,	-- 60
    7.074864612,	7.244661363,	7.420948123,	7.603998176,	7.794098131,	-- 65
    7.991548617,	8.196665031,	8.409778322,	8.631235818,	8.861402106,	-- 70
    8.94435374,	9.028081885,	9.112593809,	9.19789685,	9.283998413,	-- 75
    9.370905974,	9.458627076,	9.547169336,	9.636540441,	9.726748149,	-- 80
    10.86738033,	12.14177169,	13.56560783,	15.15641378,	16.9337697,	-- 85
    18.91955183,	21.13820182,	23.61702752,	26.3865391,	36.80052531,	-- 90
  };

local spd_cnv = {
    0.764143609,	0.764143609,	0.764143609,	0.764143609,	0.764143609,	-- 5
    0.764143609,	0.764143609,	0.764143609,	0.764143609,	0.764143609,	-- 10
    0.764143609,	0.802350789,	0.84055797,	0.87876515,	0.916972331,	-- 15
    0.955179511,	0.993386692,	1.031593872,	1.069801053,	1.108008233,	-- 20
    1.119457652,	1.131398533,	1.143843917,	1.156807481,	1.170303569,	-- 25
    1.184347211,	1.19895416,	1.214140913,	1.229924745,	1.246323742,	-- 30
    1.263356833,	1.281043828,	1.299405457,	1.318463403,	1.338240354,	-- 35
    1.35876004,	1.38004728,	1.402128037,	1.425029461,	1.448779953,	-- 40
    1.473409212,	1.498948305,	1.525429725,	1.55288746,	1.581357063,	-- 45
    1.610875728,	1.641482367,	1.673217693,	1.706124308,	1.740246794,	-- 50
    1.775631812,	1.812328203,	1.850387095,	1.88986202,	1.93080903,	-- 55
    1.973286829,	2.017356901,	2.063083658,	2.110534582,	2.159780389,	-- 60
    2.210895191,	2.263956676,	2.319046288,	2.37624943,	2.435655666,	-- 65
    2.497358943,	2.561457822,	2.628055726,	2.697261193,	2.769188158,	-- 70
    2.795110544,	2.821275589,	2.847685565,	2.874342766,	2.901249504,	-- 75
    2.928408117,	2.955820961,	2.983490418,	3.011418888,	3.039608797,	-- 80
    3.396056354,	3.794303652,	4.239252446,	4.736379307,	5.29180303,	-- 85
    5.912359947,	6.605688069,	7.3803211,	8.24579347,	11.50016416,	-- 90
  };

function addon.tsv:SetupConversionFactors()
	local level = UnitLevel("Player");
    level = math.max(level,1);
    
	addon.CritConv 		= crt_cnv[level];
	addon.HasteConv 	= hst_cnv[level];
	addon.VersConv 		= vrs_cnv[level];
	addon.MasteryConv 	= mst_cnv[level];
	addon.LeechConv		= lee_cnv[level];
	addon.AvoidConv     = avd_cnv[level];
	addon.SpeedConv     = spd_cnv[level];
end

local statIdMap = {
    [CR_CRIT_SPELL]={["conversionFactor"]="CritConv",["rating"]="BaseCritRating",["bracket"]="StatBrackets"},
    [CR_HASTE_SPELL]={["conversionFactor"]="HasteConv",["rating"]="BaseHasteRating", ["bracket"]="StatBrackets"},
    [CR_MASTERY]={["conversionFactor"]="MasteryConv",["rating"]="BaseMasteryRating",["bracket"]="StatBrackets"},
    [CR_VERSATILITY_DAMAGE_DONE]={["conversionFactor"]="VersConv",["rating"]="BaseVersatilityRating",["bracket"]="StatBrackets"},
    [CR_LIFESTEAL]={["conversionFactor"]="LeechConv",["rating"]="BaseLeechRating",["bracket"]="TertStatBrackets"},
	[CR_AVOIDANCE]={["conversionFactor"]="AvoidConv",["rating"]="BaseAvoidanceRating",["bracket"]="TertStatBrackets"},
	[CR_SPEED]={["conversionFactor"]="SpeedConv",["rating"]="BaseSpeedRating",["bracket"]="TertStatBrackets"},
}


--[[
    https://www.wowhead.com/news=318435/update-on-diminishing-returns-for-secondary-stats-in-shadowlands-new-thresholds-

    From 0 to 30%, there's no penalty.
    From 30% to 39%, there's a 10% penalty.
    From 39% to 47%, there's a 20% penalty.
    From 47% to 54%, there's a 30% penalty.
    From 54% to 66%, there's a 40% penalty.
    From 66% to 126%, there's a 50% penalty.
    You can't get more than 126% from gear rating.
]]
--[[
Secondary Stats get their scaling from id 21024
https://raw.githubusercontent.com/simulationcraft/simc/refs/heads/midnight/engine/dbc/generated/item_scaling.inc
  { 21024,  0,    0.00000f,    0.00000f,    0.00000f,    0.00000f },
  { 21024,  1,   30.00000f,   30.00000f,    0.00000f,    0.00000f },
  { 21024,  2,   40.00000f,   39.00000f,    0.00000f,    0.00000f },
  { 21024,  3,   50.00000f,   47.00000f,    0.00000f,    0.00000f },
  { 21024,  4,   60.00000f,   54.00000f,    0.00000f,    0.00000f },
  { 21024,  5,   80.00000f,   66.00000f,    0.00000f,    0.00000f },
  { 21024,  6,  100.00000f,   76.00000f,    0.00000f,    0.00000f },
  { 21024,  7,  200.00000f,  126.00000f,    0.00000f,    0.00000f },
]]
addon.tsv.StatBrackets = {
    {["size"]=30,["penalty"]=0},
    {["size"]=10,["penalty"]=0.1},
    {["size"]=10,["penalty"]=0.2},
    {["size"]=10,["penalty"]=0.3},
    {["size"]=20,["penalty"]=0.4},
    {["size"]=120,["penalty"]=0.5},
    {["size"]=100000,["penalty"]=1.0},
};
--[[
Tertiary Stats get their scaling from id 21025
https://raw.githubusercontent.com/simulationcraft/simc/refs/heads/midnight/engine/dbc/generated/item_scaling.inc
  { 21025,  0,    0.00000f,    0.00000f,    0.00000f,    0.00000f },
  { 21025,  1,    0.50000f,    0.50000f,    0.00000f,    0.00000f },
  { 21025,  2,   10.00000f,   10.00000f,    0.00000f,    0.00000f },
  { 21025,  3,   15.00000f,   14.00000f,    0.00000f,    0.00000f },
  { 21025,  4,   20.00000f,   17.00000f,    0.00000f,    0.00000f },
  { 21025,  5,   25.00000f,   19.00000f,    0.00000f,    0.00000f },
  { 21025,  6,  100.00000f,   49.00000f,    0.00000f,    0.00000f },
]]
addon.tsv.TertStatBrackets = {
    {["size"]=10,["penalty"]=0},
    {["size"]=5,["penalty"]=0.2},
    {["size"]=5,["penalty"]=0.4},
    {["size"]=80,["penalty"]=0.6},
    {["size"]=100000,["penalty"]=1.0},
};

--penalty is the % penalty currently
--trueRating is how much stat you effectively have after accounting for diminishes
--bracketRating is how far into the current bracket you are.
--bracketMaxRating is the total rating in your current bracket
function addon.tsv:GetStatDiminishBracket(statId,amount)
    local stat = statIdMap[statId];
    if ( not stat ) then
        return;
    end

    local rating = addon[stat.rating];
    local conversionFactor = addon[stat.conversionFactor];
    local amount = amount or 0;
    local bracket = addon.tsv[stat.bracket];

    local percent = (rating+amount) / conversionFactor;
    local bracket_rating = 0;
    local bracket_max_rating = 0;
    local bracket_penalty = 0;
    local bracket_next_penalty = 0.1;
    local true_rating = 0;

    for i,bracket in ipairs(bracket) do
        if ( percent < bracket.size ) then
            bracket_rating = math.floor(0.5+percent * conversionFactor);
            bracket_max_rating = math.floor(0.5+bracket.size * conversionFactor);
            bracket_penalty = bracket.penalty;
            bracket_next_penalty = self.StatBrackets[i+1] and self.StatBrackets[i+1].penalty or 1;
            true_rating = true_rating + (percent * conversionFactor * (1.0 - bracket.penalty) );
            break;
        else
            true_rating = true_rating + (bracket.size * conversionFactor * (1.0 - bracket.penalty) );
        end
        percent = percent - bracket.size;
    end

    true_rating = math.floor(0.005+100*true_rating)/100;
    return true_rating, bracket_penalty, bracket_next_penalty, bracket_rating, bracket_max_rating
end


function addon.tsv:RecalculateTrueStatRatings() 
    addon.BaseCritRating = GetCombatRating(CR_CRIT_SPELL);
    addon.BaseHasteRating = GetCombatRating(CR_HASTE_SPELL);
    addon.BaseMasteryRating = GetCombatRating(CR_MASTERY);
    addon.BaseVersatilityRating = GetCombatRating(CR_VERSATILITY_DAMAGE_DONE);
	addon.BaseLeechRating = GetCombatRating(CR_LIFESTEAL);
	addon.BaseAvoidanceRating = GetCombatRating(CR_AVOIDANCE);
	addon.BaseSpeedRating = GetCombatRating(CR_SPEED);
    
    addon.TrueStatInfo = addon.TrueStatInfo or {};
    for statId,stat in pairs(statIdMap) do 
        local true_rating, bracket_penalty, bracket_next_penalty, bracket_rating, bracket_max_rating = self:GetStatDiminishBracket(statId);
        addon.TrueStatInfo[statId] = {
            bracketPenalty = bracket_penalty,
            bracketNextPenalty = bracket_next_penalty,
            bracketRating = bracket_rating,
            bracketMaxRating = bracket_max_rating,
            trueRating = true_rating,
            baseRating = addon[stat.rating],
            conversionFactor = addon[stat.conversionFactor]
        };
    end
end

function addon.tsv:GetTrueStatRatingAdded(statId,amountStr)
    local amountStr = amountStr:gsub(",",""); --numbers are big enough to have commas now
    local amount = tonumber(amountStr);
    local currentTrueRating = addon.TrueStatInfo[statId].trueRating;
    local addedTrueRating = self:GetStatDiminishBracket(statId,amount);
    local diff = addedTrueRating - currentTrueRating;
    diff = math.floor(0.005+100*diff)/100;
    return diff;
end
